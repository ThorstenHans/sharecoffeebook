# Getting Started

Enough dry background and information about ShareCoffee, let's get started using it. Within the upcoming sections you'll learn how to build a simple *Hello World SharePoint App*. Once the Hello World App is finished you'll get an introduction into the *ShareCoffee.Common* namespace, which is the actual core of ShareCoffee. Almost every additional feature is built on top of ShareCoffee.Commons. It's important to understand all the concepts and functionality which is built in the framework to be as productive as possible when building SharePoint Apps.

## Package Managers

Package Managers are great time savers for every developer. ShareCoffee is available for

 * [NuGet](http://www.nuget.org)
 * [Bower.IO](http://bower.io)

At the time ShareCoffee has been created, these were the most popular and well-known package managers out there. Every .NET developer should know NuGet, if you don't know it yet, you should read [Scott Hanselman's NuGet introduction](http://www.hanselman.com/blog/IntroducingNuGetPackageManagementForNETAnotherPieceOfTheWebStack.aspx) first.

Bower.IO introduces itself as package manager for the client-side. Which implies that bower is only managing client-side dependencies. Bower became popular with the rise of [Node.JS](http://nodejs.org) and [yeoman](http://yeoman.io).

### Installing ShareCoffee with NuGet

Installing ShareCoffee using NuGet is really simple. Just invoke the *Install-Package* command from the Package Manager Console, or use the Package Manager Dialogs provided by Visual Studio.

    Install-Package ShareCoffee

### Installing ShareCoffee with bower.io

First let's asume that *NodeJS* and *npm* (Node Package Manager) are installed on your development system. If that's true, you can install bower package manager by invoking

    # use g switch to install bower globally
    npm install bower -g
    # on unix based systems you've to prefix the command with sudo, which ensures that you've the required permissions
    sudo npm install bower -g


## Hello ShareCoffee



## ShareCoffee.Commons

Commons is exposing a lot of great functionality, that you can use within your App to gather required information about the current context.

### ShareCoffee.Commons.getAppWebUrl()

As the name implies, you can ask for the current AppWeb url by simply executing   `ShareCoffee.Commons.getAppWebUrl()`. Internally this method is taking care of all the context. first it's checking if your App is running as SharePoint Hosted, if so it's returning the AppWeb url from the global `_spPageContextInfo` object instead of pulling it from the QueryString because it can save some cycles by doing so. (Reading the AppWebUrl from the QueryStirng is common in Provider Hosted Apps)

    var myAppWebUrl = ShareCoffee.Commons.getAppWebUrl();

But there are scenarios when you as a developer are going to store the AppWeb url in your own storage and you'd like to read it from there. Therefor is ShareCoffee exposing an injection point where you can either provide directly a string or a method which will be invoked. Once you set one of both, it's only executing your logic and ignoring all the other stuff.

    // Providing a string directly instead of using the internal ShareCoffee logic
    ShareCoffee.Commons.loadAppWebUrlFrom = "https://sample.sharepoint.com/appweburl";
    var myAppWebUrl = ShareCoffee.Commons.getAppWebUrl();

    console.log(myAppWebUrl);
    // will print "https://sample.sharepoint.com/appweburl"

    // Providing a method which has to return the AppWeb url as String
    ShareCoffee.Commons.loadAppWebUrlFrom = function(){
        // load AppWeb url form somewhere else
        return "https://sample.sharepoint.com/appweburl2";
    };
    var myAppWebUrl = ShareCoffee.Commons.getAppWebUrl();

    console.log(myAppWebUrl);
    // will print "https://sample.sharepoint.com/appweburl2"
I
